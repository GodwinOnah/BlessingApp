{"ast":null,"code":"import _asyncToGenerator from \"/Users/godwinonah/Documents/TheBags/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { firstValueFrom } from 'rxjs';\nlet CheckoutPaymentComponent = class CheckoutPaymentComponent {\n  constructor(basketService, checkOutService, toastr, router) {\n    this.basketService = basketService;\n    this.checkOutService = checkOutService;\n    this.toastr = toastr;\n    this.router = router;\n    this.errors = null;\n    this.stripe = null;\n    this.cardNumberComplete = false;\n    this.cardExpiryComplete = false;\n    this.cvcComplete = false;\n    this.loading = false;\n  }\n  ngOnInit() {\n    this.year = new Date().getFullYear();\n    this.yearSub = Number(this.year.toString().substring(2, 4));\n    loadStripe('pk_test_51Mcx2FB7QPlKfZO42IAdvFhiWvLmJJqyarpwQZYE8Mes7QioM5QNIme3OPI0KBP7tnLRf43CLRSzmCa0xzv37VmJ00VDpXrD7T').then(stripe => {\n      this.stripe = stripe;\n      const elements = stripe?.elements();\n      if (elements) {\n        this.cardNumber = elements.create('cardNumber');\n        this.cardNumber.mount(this.cardNumberElement?.nativeElement);\n        this.cardNumber.on('change', event => {\n          this.cardNumberComplete = event.complete;\n          if (event.error) this.cardErrors = event.error.message;else {\n            this.cardErrors = null;\n          }\n        });\n        this.cardExpiry = elements.create('cardExpiry');\n        this.cardExpiry.mount(this.cardExpiryElement?.nativeElement);\n        this.cardExpiry.on('change', event => {\n          this.cardExpiryComplete = event.complete;\n          if (event.error) this.cardErrors = event.error.message;else {\n            this.cardErrors = null;\n          }\n        });\n        this.cvc = elements.create('cardCvc');\n        this.cvc.mount(this.cvcElement?.nativeElement);\n        this.cvc.on('change', event => {\n          this.cvcComplete = event.complete;\n          if (event.error) this.cardErrors = event.error.message;else {\n            this.cardErrors = null;\n          }\n        });\n      }\n    });\n  }\n  get paymentIsComplete() {\n    return this.checkOutForm.get('paymentForm')?.valid && this.cardNumberComplete && this.cardExpiryComplete && this.cvcComplete;\n  }\n  ConfirmPaymentUsingStripe(basket) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!basket) throw new Error('basket is null');\n      const result = _this.stripe?.confirmCardPayment(basket.clientSecret, {\n        payment_method: {\n          card: _this.cardNumber,\n          billing_details: {\n            name: _this.checkOutForm?.get('paymentForm')?.get('nameOnCard')?.value\n          }\n        }\n      });\n      if (!result) throw new Error('problem confirming problem with stripe');\n      return result;\n    })();\n  }\n  GetOrderDetails(basket) {\n    const shippingAddress = this.checkOutForm?.get('addressForm')?.value;\n    if (!shippingAddress) throw new Error('No Address added');\n    return {\n      basketId: basket.id,\n      deliveryId: basket.deliveryId,\n      shippingAddress: shippingAddress\n    };\n  }\n  CreateOrder(basket) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!basket) throw new Error('basket is null');\n      const orderToCreate = _this2.GetOrderDetails(basket);\n      return firstValueFrom(_this2.checkOutService.CreateAnOrder(orderToCreate));\n      ;\n    })();\n  }\n  OrderSubmission() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.loading = true;\n      const basket = _this3.basketService.CurrentBasket();\n      if (!basket) throw new Error(\"Cannot get basket\");\n      try {\n        const createdOrder = yield _this3.CreateOrder(basket);\n        const paymentResult = yield _this3.ConfirmPaymentUsingStripe(basket);\n        if (paymentResult.paymentIntent) {\n          _this3.basketService.DeleteBasket(basket);\n          const navigationExtras = {\n            state: createdOrder\n          };\n          _this3.router.navigate(['Checkout/success'], navigationExtras);\n        } else {\n          _this3.toastr.error(paymentResult.error.message);\n        }\n      } catch (error) {\n        _this3.toastr.error(error.message);\n      } finally {\n        _this3.loading = false;\n      }\n    })();\n  }\n};\n__decorate([Input()], CheckoutPaymentComponent.prototype, \"checkOutForm\", void 0);\n__decorate([ViewChild('cardNumber')], CheckoutPaymentComponent.prototype, \"cardNumberElement\", void 0);\n__decorate([ViewChild('cardExpiry')], CheckoutPaymentComponent.prototype, \"cardExpiryElement\", void 0);\n__decorate([ViewChild('cardCvc')], CheckoutPaymentComponent.prototype, \"cvcElement\", void 0);\nCheckoutPaymentComponent = __decorate([Component({\n  selector: 'app-checkout-payment',\n  templateUrl: './checkout-payment.component.html',\n  styleUrls: ['./checkout-payment.component.scss']\n})], CheckoutPaymentComponent);\nexport { CheckoutPaymentComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}