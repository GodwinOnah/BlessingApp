{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ErrorInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        if (error.status === 400) {\n          //validation errors\n          if (error.error.error) {\n            throw error.error;\n          } else {\n            this.toastr.error(error.error.message, error.error.statusCode);\n          }\n        }\n        if (error.status === 401) {\n          this.toastr.error(error.error.message, error.error.statusCode);\n        }\n        if (error.status === 404) {\n          this.router.navigateByUrl('/not-found');\n        }\n        if (error.status === 500) {\n          this.router.navigateByUrl('/server-error');\n        }\n      }\n      return throwError(error);\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAASA,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;AAIzD,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,MAAa;IAAb,WAAM,GAANA,MAAM;EAAU;EAEpCC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAE9BT,UAAU,CAACU,KAAK,IAAE;MACd,IAAGA,KAAK,EAAC;QAEP,IAAGA,KAAK,CAACC,MAAM,KAAG,GAAG,EAAC;UAAE;UAEtB,IAAGD,KAAK,CAACA,KAAK,CAACA,KAAK,EAAC;YACjB,MAAMA,KAAK,CAACA,KAAK;WACpB,MAAI;YAEH,IAAI,CAACE,MAAM,CAACF,KAAK,CAACA,KAAK,CAACA,KAAK,CAACG,OAAO,EAACH,KAAK,CAACA,KAAK,CAACI,UAAU,CAAC;;;QAOjE,IAAGJ,KAAK,CAACC,MAAM,KAAG,GAAG,EAAC;UACpB,IAAI,CAACC,MAAM,CAACF,KAAK,CAACA,KAAK,CAACA,KAAK,CAACG,OAAO,EAACH,KAAK,CAACA,KAAK,CAACI,UAAU,CAAC;;QAI7D,IAAGJ,KAAK,CAACC,MAAM,KAAG,GAAG,EAAC;UACpB,IAAI,CAACP,MAAM,CAACW,aAAa,CAAC,YAAY,CAAC;;QAIzC,IAAGL,KAAK,CAACC,MAAM,KAAG,GAAG,EAAC;UACpB,IAAI,CAACP,MAAM,CAACW,aAAa,CAAC,eAAe,CAAC;;;MAKhD,OAAOd,UAAU,CAACS,KAAK,CAAC;IAE1B,CAAC,CACF,CAEF;EACH;;AA9CWR,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;AAAA","names":["catchError","throwError","ErrorInterceptor","constructor","router","intercept","request","next","handle","pipe","error","status","toastr","message","statusCode","navigateByUrl","factory"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/BagShop-Client-App/client/src/app/core/Interceptors/error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  toastr: any;\n\n  constructor(private router:Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n\n      catchError(error=>{\n          if(error){\n\n            if(error.status===400){ //validation errors\n\n              if(error.error.error){\n                  throw error.error;\n              }else{\n\n                this.toastr.error(error.error.message,error.error.statusCode)\n\n              }\n             \n\n            }\n\n            if(error.status===401){\n              this.toastr.error(error.error.message,error.error.statusCode)\n\n            }\n\n              if(error.status===404){\n                this.router.navigateByUrl('/not-found')\n\n              }\n\n              if(error.status===500){\n                this.router.navigateByUrl('/server-error')\n\n              }\n          }\n\n          return throwError(error);\n\n        }\n      )\n\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}