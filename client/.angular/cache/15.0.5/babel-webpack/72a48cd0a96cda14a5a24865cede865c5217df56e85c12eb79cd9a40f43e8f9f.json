{"ast":null,"code":"import { environment } from 'environments/environment';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { Basket } from '../prodsharemod/models/IBasket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BasketService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.basketSource = new BehaviorSubject(null);\n    this.totalBasketPriceSource = new BehaviorSubject(null);\n    this.basket$ = this.basketSource.asObservable();\n    this.totalBasketPriceSource$ = this.totalBasketPriceSource.asObservable();\n    this.delivery = [];\n  }\n  GetBasket(id) {\n    return this.http.get(this.baseUrl + 'basket?id=' + id).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.TotalBasketValue();\n      }\n    });\n  }\n  SetBasket(basket) {\n    console.log(basket.deliveryName);\n    return this.http.post(this.baseUrl + 'basket', basket).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.TotalBasketValue();\n      }\n    });\n  }\n  CurrentBasket() {\n    return this.basketSource.value;\n  }\n  TotalBasketValue() {\n    const basket = this.CurrentBasket();\n    if (!basket) return;\n    const subTotal = basket.items.reduce((sum, item) => item.prodPrice * item.quantity + sum, 0);\n    const total = subTotal + Number(basket.deliveryPrice);\n    this.totalBasketPriceSource.next({\n      shippingPrice: basket.deliveryPrice,\n      subTotal,\n      total\n    });\n  }\n  AddItemsToBasket(item, quantity = 1) {\n    if (this.isProduct(item)) item = this.MapBasketToBasketItem(item);\n    const basket = this.CurrentBasket() ?? this.CreateBasket();\n    basket.items = this.AddOrUpdate(basket.items, item, quantity);\n    this.SetBasket(basket);\n  }\n  RemoveItemsFromBasket(id, quantity) {\n    const basket = this.CurrentBasket();\n    if (!basket) return;\n    const item = basket.items.find(index => index.id === id); //finding item \n    if (item.quantity < 0) return;\n    if (item) {\n      item.quantity -= quantity;\n      if (item.quantity === 0) basket.items = basket.items.filter(index => index.id != id);\n      if (basket.items.length > 0) this.SetBasket(basket);else {\n        this.DeleteBasket(basket);\n      }\n    }\n  }\n  DeleteBasket(basket) {\n    return this.http.delete(this.baseUrl + 'basket?id=' + basket.id).subscribe({\n      next: () => {\n        this.RemoveAllItemsInBasket();\n      }\n    });\n  }\n  RemoveAllItemsInBasket() {\n    this.basketSource.next(null);\n    this.totalBasketPriceSource.next(null);\n    localStorage.removeItem('basket_id');\n  }\n  AddOrUpdate(items, itemToAdd, quantity) {\n    const item = items.find(index => index.id === itemToAdd.id); //finding item index\n    if (item) item.quantity += quantity;else {\n      itemToAdd.quantity = quantity;\n      items.push(itemToAdd);\n    }\n    return items;\n  }\n  CreateBasket() {\n    const basket = new Basket();\n    basket.deliveryPrice = 1;\n    localStorage.setItem('basket_id', basket.id); //computer local storage set this id for load after refereshing or return back  \n    return basket;\n  }\n  MapBasketToBasketItem(item) {\n    return {\n      id: item.id,\n      prodName: item.prodName,\n      prodPrice: item.prodPrice,\n      quantity: 0,\n      prodPicture: item.prodPicture,\n      productBrand: item.productBrand,\n      productType: item.productType\n    };\n  }\n  isProduct(item) {\n    return item.productBrand != undefined;\n  }\n  SetDelivery(delivery) {\n    const basket = this.CurrentBasket();\n    if (basket) {\n      basket.deliveryPrice = delivery.delPrice;\n      basket.deliveryId = delivery.id;\n      basket.deliveryName = delivery.delName;\n      basket.deliveryTime = delivery.delTime;\n      basket.deliveryDescription = delivery.delDescription;\n      this.SetBasket(basket);\n    }\n  }\n  CreatePaymentIntent() {\n    return this.http.post(this.baseUrl + 'payment/' + this.CurrentBasket()?.id, {}).pipe(map(basket => {\n      this.basketSource.next(basket);\n    }));\n  }\n}\nBasketService.ɵfac = function BasketService_Factory(t) {\n  return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient));\n};\nBasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketService,\n  factory: BasketService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}