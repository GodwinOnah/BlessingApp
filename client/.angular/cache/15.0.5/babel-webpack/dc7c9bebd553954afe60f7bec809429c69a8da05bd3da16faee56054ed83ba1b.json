{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class ErrorInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error) {\n        if (error.status === 400) {\n          //validation errors\n          if (error.error.error) {\n            throw error.error;\n          } else {\n            this.toastr.error(error.error.message, error.error.statusCode);\n          }\n        }\n        if (error.status === 401) {\n          this.toastr.error(error.error.message, error.error.statusCode);\n        }\n        if (error.status === 404) {\n          this.router.navigateByUrl('/not-found');\n        }\n        if (error.status === 500) {\n          this.router.navigateByUrl('/server-error');\n        }\n      }\n      return throwError(error);\n    }));\n  }\n}\nErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n  return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router));\n};\nErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptor,\n  factory: ErrorInterceptor.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}