{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Account/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuardsGuard {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.accountService.AppUser$.pipe(map(auth => {\n      if (auth) return true;else {\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnParam: state.url\n          }\n        });\n        return false;\n      }\n    }));\n  }\n}\nGuardsGuard.ɵfac = function GuardsGuard_Factory(t) {\n  return new (t || GuardsGuard)(i0.ɵɵinject(i1.UserAccountService), i0.ɵɵinject(i2.Router));\n};\nGuardsGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardsGuard,\n  factory: GuardsGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAoB,MAAM;;;;AAMtC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAAiC,EAAUC,MAAa;IAAxD,mBAAc,GAAdD,cAAc;IAA6B,WAAM,GAANC,MAAM;EAGrE;EACAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,OAAO,IAAI,CAACJ,cAAc,CAACK,QAAQ,CAACC,IAAI,CAACT,GAAG,CAE1CU,IAAI,IAAE;MACN,IAAIA,IAAI,EAAE,OAAO,IAAI,CAAC,KACpB;QACA,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;UAACC,WAAW,EAAC;YAACC,WAAW,EAACN,KAAK,CAACO;UAAG;QAAC,CAAC,CAAC;QAC/E,OAAO,KAAK;;IACf,CAAC,CACD,CAAC;EACJ;;AAlBWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YAFV;AAAM","names":["map","GuardsGuard","constructor","accountService","router","canActivate","route","state","AppUser$","pipe","auth","navigate","queryParams","returnParam","url","factory","providedIn"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/core/guards.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate,Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { map, Observable } from 'rxjs';\nimport { UserAccountService } from '../Account/account.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardsGuard implements CanActivate {\n\n  constructor(private accountService:UserAccountService, private router:Router){\n\n\n  }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> {\n    return this.accountService.AppUser$.pipe(map(\n\n      auth=>{\n      if (auth) return true;\n    else{\n        this.router.navigate(['/account/login'], {queryParams:{returnParam:state.url}});\n        return false;\n    }}\n    ));\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}