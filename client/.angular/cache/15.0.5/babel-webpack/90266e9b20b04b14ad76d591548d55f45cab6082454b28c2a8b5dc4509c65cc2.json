{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map, of } from 'rxjs';\nimport { ShopParameters } from '../prodsharemod/models/shopParameters';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProdshopmodService {\n  constructor(http) {\n    this.http = http;\n    this.url = environment.apiUrl;\n    this.products = [];\n    this.brands = [];\n    this.types = [];\n    this.shopParams = new ShopParameters();\n    this.cashe = new Map();\n  }\n  getProducts(useCashe = true) {\n    if (!useCashe) this.cashe = new Map();\n    if (this.cashe.size > 0 && useCashe) {\n      if (this.cashe.has(Object.values(this.shopParams).join('-'))) {\n        this.pagination = this.cashe.get(Object.values(this.shopParams).join('-'));\n        if (this.pagination) return of(this.pagination);\n      }\n    }\n    let params = new HttpParams();\n    if (this.shopParams.brandId !== 0) params = params.append('brandId', this.shopParams.brandId.toString());\n    if (this.shopParams.typeId !== 0) params = params.append('typeId', this.shopParams.typeId.toString());\n    if (this.shopParams.search) params = params.append('search', this.shopParams.search);\n    params = params.append('sort', this.shopParams.sort);\n    params = params.append('pageIndex', this.shopParams.pageNumber.toString());\n    params = params.append('pageSize', this.shopParams.pageSize.toString());\n    return this.http.get(this.url + 'products', {\n      params\n    }).pipe(map(response => {\n      this.cashe.set(Object.values(this.shopParams).join('-'), response);\n      this.pagination = response;\n      return response;\n    }));\n  }\n  setShopParams(params) {\n    this.shopParams = params;\n  }\n  getShopParams() {\n    return this.shopParams;\n  }\n  getProduct(id) {\n    const product = [...this.cashe.values()].reduce((accumulator, paginationResult) => {\n      return {\n        ...accumulator,\n        ...paginationResult.data.find(x => x.id == id)\n      };\n    }, {});\n    if (Object.keys(product).length !== 0) return of(product);\n    return this.http.get(this.url + 'products/' + id);\n  }\n  getBrands() {\n    if (this.brands.length > 0) return of(this.brands);\n    return this.http.get(this.url + 'products/brands').pipe(map(brands => this.brands = brands));\n  }\n  getProductTypes() {\n    if (this.types.length > 0) return of(this.types);\n    return this.http.get(this.url + 'products/types').pipe(map(types => this.types = types));\n  }\n  UploadProduct(value) {\n    return this.http.post(this.url + 'products', value);\n  }\n  saveProductPicture(formData) {\n    return this.http.post(this.url + 'products/savePicture', formData);\n  }\n  UploadBrand(id, value) {\n    var brand = {\n      id: id,\n      Name: value\n    };\n    return this.http.post(this.url + 'productBrand', brand);\n  }\n  UploadType(id, value) {\n    var type = {\n      id: id,\n      Name: value\n    };\n    return this.http.post(this.url + 'productType', type);\n  }\n  DeleteProduct(id) {\n    return this.http.delete(this.url + 'products/' + id);\n  }\n  DeleteType(id) {\n    return this.http.delete(this.url + 'productType/' + id);\n  }\n  DeleteBrand(id) {\n    return this.http.delete(this.url + 'productBrand/' + id);\n  }\n  GetAdverts() {\n    return this.http.get(this.url + 'advert');\n  }\n}\nProdshopmodService.ɵfac = function ProdshopmodService_Factory(t) {\n  return new (t || ProdshopmodService)(i0.ɵɵinject(i1.HttpClient));\n};\nProdshopmodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProdshopmodService,\n  factory: ProdshopmodService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}