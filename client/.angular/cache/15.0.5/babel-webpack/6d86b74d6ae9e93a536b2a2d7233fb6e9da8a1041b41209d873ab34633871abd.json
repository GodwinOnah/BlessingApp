{"ast":null,"code":"import { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/Account/account.service\";\nexport class JwtInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    this.accountService.AppUser$.pipe(take(1)).subscribe({\n      next: user => this.token = user?.token\n    });\n    if (this.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\nJwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || JwtInterceptor)(i0.ɵɵinject(i1.UserAccountService));\n};\nJwtInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JwtInterceptor,\n  factory: JwtInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,IAAI,QAAQ,MAAM;;;AAKvC,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,cAAkC;IAAlC,mBAAc,GAAdA,cAAc;EAAuB;EAEzDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI,CAACH,cAAc,CAACI,QAAQ,CAACC,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAACS,SAAS,CAClD;MAACH,IAAI,EACHI,IAAI,IACJ,IAAI,CAACC,KAAK,GAAGD,IAAI,EAAEC;IAAK,CAAC,CAAC;IAE9B,IAAI,IAAI,CAACA,KAAK,EAAE;MACdN,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAU,IAAI,CAACH,KAAK;;OAEtC,CAAC;;IAEJ,OAAOL,IAAI,CAACS,MAAM,CAACV,OAAO,CAAC;EAC7B;;AAnBWJ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAe,SAAdf,cAAc;AAAA","names":["take","JwtInterceptor","constructor","accountService","intercept","request","next","AppUser$","pipe","subscribe","user","token","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/core/Interceptors/jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, take } from 'rxjs';\nimport { UserAccountService } from 'app/Account/account.service';\n\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  token?: string;\n\n  constructor(private accountService: UserAccountService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    this.accountService.AppUser$.pipe(take(1)).subscribe(\n      {next: \n        user => \n        this.token = user?.token})\n    \n    if (this.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.token}`\n        }\n      })\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}