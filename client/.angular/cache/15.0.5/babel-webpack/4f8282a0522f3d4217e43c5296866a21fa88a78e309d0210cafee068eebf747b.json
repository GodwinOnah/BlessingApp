{"ast":null,"code":"import { delay, finalize, identity } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../NewServices/spinner.service\";\nexport class WhenLoadingPage {\n  constructor(spinnerService) {\n    this.spinnerService = spinnerService;\n  }\n  intercept(req, next) {\n    if (req.url.includes('emailExists') || req.method === 'Post' && req.url.includes('order') || req.method === 'DELETE') return next.handle(req);\n    this.spinnerService.WhenBusy();\n    return next.handle(req).pipe(environment.production ? identity : delay(1000),\n    //give a delay of 1 seconds if not in production mode\n    finalize(() => {\n      this.spinnerService.WhenIdle();\n    }));\n  }\n}\nWhenLoadingPage.ɵfac = function WhenLoadingPage_Factory(t) {\n  return new (t || WhenLoadingPage)(i0.ɵɵinject(i1.SpinnerService));\n};\nWhenLoadingPage.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WhenLoadingPage,\n  factory: WhenLoadingPage.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}