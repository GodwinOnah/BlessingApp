{"ast":null,"code":"import { environment } from \"environments/environment\";\nimport { delay, finalize, identity } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../NewServices/spinner.service\";\nexport class WhenLoadingPage {\n  constructor(spinnerService) {\n    this.spinnerService = spinnerService;\n  }\n  intercept(req, next) {\n    if (req.url.includes('emailExists') || req.method === 'Post' && req.url.includes('order') || req.method === 'DELETE') return next.handle(req);\n    this.spinnerService.WhenBusy();\n    return next.handle(req).pipe(environment.production ? identity : delay(1000),\n    //give a delay of 1 seconds if not in production mode\n    finalize(() => {\n      this.spinnerService.WhenIdle();\n    }));\n  }\n}\nWhenLoadingPage.ɵfac = function WhenLoadingPage_Factory(t) {\n  return new (t || WhenLoadingPage)(i0.ɵɵinject(i1.SpinnerService));\n};\nWhenLoadingPage.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WhenLoadingPage,\n  factory: WhenLoadingPage.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAoB,MAAM;;;AAK5D,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAkB;EAGpDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC/C,IAAGD,GAAG,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAEH,GAAG,CAACI,MAAM,KAAG,MAAM,IACrDJ,GAAG,CAACE,GAAG,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAEH,GAAG,CAACI,MAAM,KAAG,QAAQ,EAC7C,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;IAE5B,IAAI,CAACF,cAAc,CAACQ,QAAQ,EAAE;IAEzB,OAAOL,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC,CAACO,IAAI,CACvBf,WAAW,CAACgB,UAAU,GAAGb,QAAQ,GAAGF,KAAK,CAAC,IAAI,CAAC;IAAE;IAClDC,QAAQ,CAAC,MAAI;MAAC,IAAI,CAACI,cAAc,CAACW,QAAQ,EAAE;IAAA,CAAC,CAAC,CAE7C;EACL;;AAjBCb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAc,SAAfd,eAAe;AAAA","names":["environment","delay","finalize","identity","WhenLoadingPage","constructor","spinnerService","intercept","req","next","url","includes","method","handle","WhenBusy","pipe","production","WhenIdle","factory"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/core/Interceptors/Spinner.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { environment } from \"environments/environment\";\nimport { delay, finalize, identity, Observable } from \"rxjs\";\nimport { SpinnerService } from \"../NewServices/spinner.service\";\n\n\n@Injectable()\nexport class WhenLoadingPage implements HttpInterceptor{\n\n    constructor(private spinnerService: SpinnerService){}\n\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n       if(req.url.includes('emailExists')||req.method==='Post'\n       &&req.url.includes('order')||req.method==='DELETE')\n            return next.handle(req);\n\n       this.spinnerService.WhenBusy();\n\n            return next.handle(req).pipe(\n                (environment.production ? identity : delay(1000)),//give a delay of 1 seconds if not in production mode\n                finalize(()=>{this.spinnerService.WhenIdle()})\n\n                )\n            }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}