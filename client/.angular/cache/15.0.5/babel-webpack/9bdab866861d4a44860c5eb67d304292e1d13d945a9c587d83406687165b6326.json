{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CheckoutServiceService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n  }\n  CreateAnOrder(order) {\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.post(this.baseUrl + 'order', order, {\n      headers\n    });\n  }\n  GetDelivery() {\n    return this.http.get(this.baseUrl + 'order/delivery').pipe(map(delivery => {\n      return delivery.sort((a, b) => b.delPrice - a.delPrice);\n    }));\n  }\n}\nCheckoutServiceService.ɵfac = function CheckoutServiceService_Factory(t) {\n  return new (t || CheckoutServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nCheckoutServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CheckoutServiceService,\n  factory: CheckoutServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,GAAG,QAAQ,MAAM;;;AAQ1B,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADxB,YAAO,GAAGJ,WAAW,CAACK,MAAM;EACW;EAEvCC,aAAa,CAACC,KAAoB;IAChC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIC,OAAO,GAAG,IAAIZ,WAAW,EAAE;IAC/BY,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACS,IAAI,CAAU,IAAI,CAACC,OAAO,GAAC,OAAO,EAACP,KAAK,EAAC;MAACI;IAAO,CAAC,CAAC;EACvE;EAEAI,WAAW;IACT,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAc,IAAI,CAACF,OAAO,GAAC,gBAAgB,CAAC,CAACG,IAAI,CAAChB,GAAG,CACvEiB,QAAQ,IAAG;MACT,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAGA,CAAC,CAACC,QAAQ,GAACF,CAAC,CAACE,QAAQ,CAAC;IACpD,CAAC,CACF,CAAC;EACN;;AAlBapB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;EAAAsB,YAFrB;AAAM","names":["HttpHeaders","environment","map","CheckoutServiceService","constructor","http","apiUrl","CreateAnOrder","order","token","localStorage","getItem","headers","set","post","baseUrl","GetDelivery","get","pipe","delivery","sort","a","b","delPrice","factory","providedIn"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/Checkout/checkout-service.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'environments/environment';\nimport { map } from 'rxjs';\nimport { IDelivery } from '../prodsharemod/models/IDelivery';\nimport { IOrders } from '../prodsharemod/models/IOrders';\nimport { IOrderToCreate } from '../prodsharemod/models/IOrderToCreate';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CheckoutServiceService {\n\n  baseUrl = environment.apiUrl;\n  constructor(private http:HttpClient) { }\n\n  CreateAnOrder(order:IOrderToCreate){\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n     return this.http.post<IOrders>(this.baseUrl+'order',order,{headers});\n  }\n\n  GetDelivery(){\n    return this.http.get<IDelivery[]>(this.baseUrl+'order/delivery').pipe(map(\n      delivery =>{\n        return delivery.sort((a,b)=>b.delPrice-a.delPrice)   \n      }\n    ))\n}}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}