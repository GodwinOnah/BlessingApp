{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map, of, ReplaySubject } from 'rxjs';\nimport { RegisterComponent } from './Register/register.component';\nimport { ForgotpasswrdComponent } from './forgot_password/forgotpasswrd/forgotpasswrd.component';\nimport { LoginComponent } from './login/login.component';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"bn-ng-idle\";\nexport class UserAccountService {\n  constructor(http, router, toastr, matdialog, logoutOutService) {\n    this.http = http;\n    this.router = router;\n    this.toastr = toastr;\n    this.matdialog = matdialog;\n    this.logoutOutService = logoutOutService;\n    this.baseUrl = environment.apiUrl;\n    this.AppUserSource = new ReplaySubject(1);\n    this.WhoSource = new ReplaySubject(1);\n    this.WhoSource$ = this.WhoSource.asObservable();\n    this.AppUser$ = this.AppUserSource.asObservable();\n    this.loginStatus = false;\n  }\n  LoadPreviousUser(token) {\n    if (token === null) {\n      this.AppUserSource.next(null);\n      return of(null); //return null observable\n    }\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.baseUrl + 'user', {\n      headers\n    }).pipe(map(user => {\n      if (user) {\n        localStorage.setItem(\"token\", user.token);\n        this.AppUserSource.next(user);\n        return user;\n      } else {\n        return null;\n      }\n    }));\n  }\n  Login(value) {\n    return this.http.post(this.baseUrl + 'user/login', value).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      localStorage.setItem(\"login\", this.loginStatus.toString());\n      this.AppUserSource.next(user);\n      return user;\n    }));\n  }\n  ForgotPasswrd(forgotpasswrdDetails) {\n    return this.http.put(this.baseUrl + 'user/forgotpasswrd', forgotpasswrdDetails).pipe(map(user => {}));\n  }\n  Register(value) {\n    return this.http.post(this.baseUrl + 'user/register', value).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.AppUserSource.next(user);\n    }));\n  }\n  openLoginDialog() {\n    this.closeDialog();\n    this.matdialog.open(LoginComponent, {\n      height: 'auto',\n      width: 'auto'\n    });\n  }\n  openRegDialog() {\n    this.closeDialog();\n    this.matdialog.open(RegisterComponent, {\n      height: '70%',\n      width: '40%'\n    });\n  }\n  closeDialog() {\n    this.matdialog.closeAll(); // <- Close the mat dialog\n  }\n\n  openConfirmEmailDialog() {\n    this.closeDialog();\n    this.matdialog.open(ForgotpasswrdComponent, {\n      height: 'auto',\n      width: '40%'\n    });\n  }\n  CheckEmail(email) {\n    return this.http.get(this.baseUrl + 'user/emailexist?email=' + email);\n  }\n  Logout() {\n    localStorage.removeItem('token');\n    this.AppUserSource.next(null);\n    this.router.navigateByUrl('/products');\n    this.toastr.success(\"Logged Out\");\n  }\n  autoLogout() {\n    this.logoutOutService.startWatching(180).subscribe(isTimeOut => {\n      if (isTimeOut) {\n        this.Logout();\n        this.logoutOutService.stopTimer();\n      }\n    });\n  }\n  GetAddress(token) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.baseUrl + 'user/address', {\n      headers\n    });\n  }\n  UpdateAddress(address) {\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.put(this.baseUrl + 'user/address', address, {\n      headers\n    });\n  }\n}\nUserAccountService.ɵfac = function UserAccountService_Factory(t) {\n  return new (t || UserAccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.BnNgIdleService));\n};\nUserAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserAccountService,\n  factory: UserAccountService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}