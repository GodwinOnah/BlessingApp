{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map, of, ReplaySubject } from 'rxjs';\nimport { RegisterComponent } from './Register/register.component';\nimport { ForgotpasswrdComponent } from './forgot_password/forgotpasswrd/forgotpasswrd.component';\nimport { LoginComponent } from './login/login.component';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"bn-ng-idle\";\nexport class UserAccountService {\n  constructor(http, router, toastr, matdialog, logoutOutService) {\n    this.http = http;\n    this.router = router;\n    this.toastr = toastr;\n    this.matdialog = matdialog;\n    this.logoutOutService = logoutOutService;\n    this.baseUrl = environment.apiUrl;\n    this.AppUserSource = new ReplaySubject(1);\n    this.WhoSource = new ReplaySubject(1);\n    this.WhoSource$ = this.WhoSource.asObservable();\n    this.AppUser$ = this.AppUserSource.asObservable();\n    this.loginStatus = false;\n  }\n  LoadPreviousUser(token) {\n    if (token === null) {\n      this.AppUserSource.next(null);\n      return of(null); //return null observable\n    }\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.baseUrl + 'user', {\n      headers\n    }).pipe(map(user => {\n      if (user) {\n        localStorage.setItem(\"token\", user.token);\n        this.AppUserSource.next(user);\n        return user;\n      } else {\n        return null;\n      }\n    }));\n  }\n  Login(value) {\n    return this.http.post(this.baseUrl + 'user/login', value).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      localStorage.setItem(\"login\", this.loginStatus.toString());\n      this.AppUserSource.next(user);\n      return user;\n    }));\n  }\n  ForgotPasswrd(forgotpasswrdDetails) {\n    return this.http.put(this.baseUrl + 'user/forgotpasswrd', forgotpasswrdDetails).pipe(map(user => {}));\n  }\n  Register(value) {\n    return this.http.post(this.baseUrl + 'user/register', value).pipe(map(user => {\n      localStorage.setItem('token', user.token);\n      this.AppUserSource.next(user);\n    }));\n  }\n  openLoginDialog() {\n    this.closeDialog();\n    this.matdialog.open(LoginComponent, {\n      height: 'auto',\n      width: 'auto'\n    });\n  }\n  openRegDialog() {\n    this.closeDialog();\n    this.matdialog.open(RegisterComponent, {\n      height: '70%',\n      width: '40%'\n    });\n  }\n  closeDialog() {\n    this.matdialog.closeAll(); // <- Close the mat dialog\n  }\n\n  openConfirmEmailDialog() {\n    this.closeDialog();\n    this.matdialog.open(ForgotpasswrdComponent, {\n      height: 'auto',\n      width: '40%'\n    });\n  }\n  CheckEmail(email) {\n    return this.http.get(this.baseUrl + 'user/emailexist?email=' + email);\n  }\n  Logout() {\n    localStorage.removeItem('token');\n    this.AppUserSource.next(null);\n    this.router.navigateByUrl('/products');\n    this.toastr.success(\"Logged Out\");\n  }\n  autoLogout() {\n    this.logoutOutService.startWatching(180).subscribe(isTimeOut => {\n      if (isTimeOut) {\n        this.Logout();\n        this.logoutOutService.stopTimer();\n      }\n    });\n  }\n  GetAddress(token) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get(this.baseUrl + 'user/address', {\n      headers\n    });\n  }\n  UpdateAddress(address) {\n    const token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.put(this.baseUrl + 'user/address', address, {\n      headers\n    });\n  }\n}\nUserAccountService.ɵfac = function UserAccountService_Factory(t) {\n  return new (t || UserAccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.BnNgIdleService));\n};\nUserAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserAccountService,\n  factory: UserAccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","map","of","ReplaySubject","RegisterComponent","ForgotpasswrdComponent","LoginComponent","environment","UserAccountService","constructor","http","router","toastr","matdialog","logoutOutService","apiUrl","WhoSource","asObservable","AppUserSource","LoadPreviousUser","token","next","headers","set","get","baseUrl","pipe","user","localStorage","setItem","Login","value","post","loginStatus","toString","ForgotPasswrd","forgotpasswrdDetails","put","Register","openLoginDialog","closeDialog","open","height","width","openRegDialog","closeAll","openConfirmEmailDialog","CheckEmail","email","Logout","removeItem","navigateByUrl","success","autoLogout","startWatching","subscribe","isTimeOut","stopTimer","GetAddress","UpdateAddress","address","getItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/Account/account.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { map, of, ReplaySubject } from 'rxjs';\nimport { BnNgIdleService } from 'bn-ng-idle';\nimport { Address, User } from '../prodsharemod/models/User';\nimport { MatDialog } from '@angular/material/dialog';\nimport { RegisterComponent } from './Register/register.component';\nimport { ForgotpasswrdComponent } from './forgot_password/forgotpasswrd/forgotpasswrd.component';\nimport { LoginComponent } from './login/login.component';\nimport { environment } from 'environments/environment';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAccountService {\n\n  baseUrl = environment.apiUrl;\n  private AppUserSource = new ReplaySubject<User|null>(1);\n  private WhoSource = new ReplaySubject<Boolean>(1);\n  WhoSource$ = this.WhoSource.asObservable();\n  AppUser$  = this.AppUserSource.asObservable();\n  loginStatus = false;\n\n  constructor(\n    private http : HttpClient, \n    private router : Router,\n    private toastr : ToastrService,\n    private matdialog : MatDialog,\n    private logoutOutService : BnNgIdleService) { }\n\n  LoadPreviousUser(token:string){\n     if(token===null)\n     {\n      this.AppUserSource.next(null);\n      return of(null); //return null observable\n     }\n  \n        let headers = new HttpHeaders();\n        headers = headers.set('Authorization', `Bearer ${token}`);\n      \n        return this.http.get<User>(this.baseUrl+'user',\n              {headers})\n                .pipe(\n                  map(\n                    user=>{ \n                      if(user){\n                        localStorage.setItem(\"token\",user.token);\n                        this.AppUserSource.next(user);\n                        return user;\n            } else{return null}\n                \n          }))\n  }\n\n    Login(value:any){\n\n          return this.http.post<User>(this.baseUrl+'user/login',value)\n          .pipe(\n            map(\n              user=>{\n                \n                    localStorage.setItem('token',user.token)\n                    localStorage.setItem(\"login\",this.loginStatus.toString())\n                    this.AppUserSource.next(user); \n                    return user;          \n            } ))\n      }\n\n  ForgotPasswrd(forgotpasswrdDetails:any){\n\n        return this.http.put<User>(this.baseUrl+'user/forgotpasswrd',forgotpasswrdDetails)\n        .pipe(\n          map(\n            user=>{\n          } ))\n    }\n\n    Register(value:any){\n          return this.http.post<User>(this.baseUrl+'user/register',value)\n          .pipe(\n            map(\n              user=>{\n                    localStorage.setItem('token',user.token)\n                    this.AppUserSource.next(user);          \n            }))\n  \n}\n\nopenLoginDialog(){\n  this.closeDialog();\n  this.matdialog.open(LoginComponent,\n    {height: 'auto',\n    width: 'auto'});\n}\n\nopenRegDialog(){\n  this.closeDialog();\n  this.matdialog.open(RegisterComponent,\n    {height: '70%',\n  width: '40%'});\n}\n\ncloseDialog(){\n  this.matdialog.closeAll(); // <- Close the mat dialog\n}\n\nopenConfirmEmailDialog(){\n  this.closeDialog();\n  this.matdialog.open(ForgotpasswrdComponent,\n    {height: 'auto',\n  width: '40%'});\n}\n\n  CheckEmail(email:string){\n      return this.http.get<boolean>(this.baseUrl+'user/emailexist?email='+email)\n    }\n\n  Logout(){   \n      localStorage.removeItem('token');\n      this.AppUserSource.next(null);\n      this.router.navigateByUrl('/products');\n      this.toastr.success(\"Logged Out\") \n    }\n\n  autoLogout(){\n      this.logoutOutService.startWatching(180).subscribe((isTimeOut: Boolean) => {\n     if(isTimeOut){\n              this.Logout();\n              this.logoutOutService.stopTimer();\n     }\n      })\n    }\n\n    GetAddress(token:string){\n      let headers = new HttpHeaders();\n      headers = headers.set('Authorization', `Bearer ${token}`);\n      return this.http.get<Address>(this.baseUrl+'user/address',{headers})\n    }\n\n    UpdateAddress(address:Address){\n      const token = localStorage.getItem('token');\n      let headers = new HttpHeaders();\n      headers = headers.set('Authorization', `Bearer ${token}`);\n      return this.http.put(this.baseUrl+'user/address',address,{headers});\n   }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}