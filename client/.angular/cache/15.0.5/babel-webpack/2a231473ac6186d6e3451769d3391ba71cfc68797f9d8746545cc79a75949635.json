{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"xng-breadcrumb-link-disabled\": a0\n  };\n};\nconst _c1 = function (a0, a1, a2, a3, a4, a5) {\n  return {\n    $implicit: a0,\n    info: a1,\n    last: a2,\n    first: a3,\n    index: a4,\n    count: a5\n  };\n};\nfunction BreadcrumbComponent_ng_container_2_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 7);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_a_2_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r12.$implicit;\n    const isLast_r2 = ctx_r12.last;\n    const isFirst_r3 = ctx_r12.first;\n    const index_r4 = ctx_r12.index;\n    const count_r5 = ctx_r12.count;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, breadcrumb_r1.disable))(\"routerLink\", breadcrumb_r1.routeInterceptor ? breadcrumb_r1.routeInterceptor(breadcrumb_r1.routeLink, breadcrumb_r1) : breadcrumb_r1.routeLink)(\"queryParams\", ctx_r6.preserveQueryParams ? breadcrumb_r1.queryParams : undefined)(\"fragment\", ctx_r6.preserveFragment ? breadcrumb_r1.fragment : undefined)(\"target\", ctx_r6.anchorTarget ? ctx_r6.anchorTarget : \"_self\");\n    i0.ɵɵattribute(\"aria-disabled\", breadcrumb_r1.disable)(\"tabIndex\", breadcrumb_r1.disable ? -1 : 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(12, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.itemTemplate);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const breadcrumb_r1 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(breadcrumb_r1.label);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_label_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 10);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_label_3_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_label_3_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    const breadcrumb_r1 = ctx_r16.$implicit;\n    const isLast_r2 = ctx_r16.last;\n    const isFirst_r3 = ctx_r16.first;\n    const index_r4 = ctx_r16.index;\n    const count_r5 = ctx_r16.count;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.itemTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(3, _c1, breadcrumb_r1.label, breadcrumb_r1.info, isLast_r2, isFirst_r3, index_r4, count_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.itemTemplate);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r18.separator);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtemplate(1, BreadcrumbComponent_ng_container_2_li_4_ng_container_1_Template, 1, 0, \"ng-container\", 12);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_li_4_ng_container_2_Template, 2, 1, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r8.separatorTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r8.separatorTemplate);\n  }\n}\nfunction BreadcrumbComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"li\", 3);\n    i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_a_2_Template, 3, 19, \"a\", 4);\n    i0.ɵɵtemplate(3, BreadcrumbComponent_ng_container_2_label_3_Template, 3, 10, \"label\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, BreadcrumbComponent_ng_container_2_li_4_Template, 3, 2, \"li\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const isLast_r2 = ctx.last;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", isLast_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n  }\n}\nclass BreadcrumbItemDirective {}\nBreadcrumbItemDirective.ɵfac = function BreadcrumbItemDirective_Factory(t) {\n  return new (t || BreadcrumbItemDirective)();\n};\nBreadcrumbItemDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BreadcrumbItemDirective,\n  selectors: [[\"\", \"xngBreadcrumbItem\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbItemDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[xngBreadcrumbItem]'\n    }]\n  }], null, null);\n})();\nconst PATH_PARAM = {\n  PREFIX: ':',\n  REGEX_IDENTIFIER: '/:[^/]+',\n  REGEX_REPLACER: '/[^/]+'\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = obj => {\n  return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n  constructor(activatedRoute, router) {\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.baseHref = '/';\n    /**\n     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n     * Breadcrumbs can be set from anywhere (component, service) in the app.\n     * On every breadcrumb update check this store and use the info if available.\n     */\n    this.dynamicBreadcrumbStore = [];\n    /**\n     * breadcrumbList for the current route\n     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n     * If effected, update the change and emit a new stream\n     */\n    this.currentBreadcrumbs = [];\n    this.previousBreadcrumbs = [];\n    /**\n     * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n     * Emits on every route change OR dynamic update of breadcrumb\n     */\n    this.breadcrumbs = new BehaviorSubject([]);\n    this.breadcrumbs$ = this.breadcrumbs.asObservable();\n    this.detectRouteChanges();\n  }\n  /**\n   * Whenever route changes build breadcrumb list again\n   */\n  detectRouteChanges() {\n    // Special case where breadcrumb service & component instantiates after a route is navigated.\n    // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n    // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n    this.setupBreadcrumbs(this.activatedRoute.snapshot);\n    this.router.events.pipe(filter(event => event instanceof GuardsCheckEnd)).subscribe(event => {\n      // activatedRoute doesn't carry data when shouldReuseRoute returns false\n      // use the event data with GuardsCheckEnd as workaround\n      // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n      if (event.shouldActivate) {\n        this.setupBreadcrumbs(event.state.root);\n      }\n    });\n  }\n  setupBreadcrumbs(activatedRouteSnapshot) {\n    this.previousBreadcrumbs = this.currentBreadcrumbs;\n    // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n    const rootBreadcrumb = this.getRootBreadcrumb();\n    this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n    this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n  }\n  getRootBreadcrumb() {\n    const rootConfig = this.router.config.find(config => config.path === '');\n    const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n    const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n    if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n      return {\n        ...storeItem,\n        ...rootBreadcrumb,\n        routeLink: this.baseHref,\n        ...this.getQueryParamsFromPreviousList('/')\n      };\n    }\n  }\n  prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n    const {\n      path,\n      breadcrumb\n    } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n    const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n    const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n    const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n    const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n    let isAutoGeneratedLabel = false;\n    let autoGeneratedLabel = '';\n    if (!label) {\n      isAutoGeneratedLabel = true;\n      autoGeneratedLabel = resolvedSegment;\n    }\n    return {\n      ...storeItem,\n      ...breadcrumb,\n      label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n      routeLink,\n      isAutoGeneratedLabel,\n      ...this.getQueryParamsFromPreviousList(routeLink)\n    };\n  }\n  prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n    if (activatedRouteSnapshot.routeConfig?.path) {\n      const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n      this.currentBreadcrumbs.push(breadcrumbItem);\n      if (activatedRouteSnapshot.firstChild) {\n        return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n      }\n    } else if (activatedRouteSnapshot.firstChild) {\n      return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n    }\n    const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n    this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n    // remove breadcrumb items that needs to be hidden\n    const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n    this.breadcrumbs.next(breadcrumbsToShow);\n  }\n  getFromStore(alias, routeLink) {\n    return this.dynamicBreadcrumbStore.find(item => {\n      return alias && alias === item.alias || routeLink && routeLink === item.routeLink || this.matchRegex(routeLink, item.routeRegex);\n    });\n  }\n  /**\n   * use exact match instead of regexp.test\n   * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n   */\n  matchRegex(routeLink, routeRegex) {\n    const match = routeLink.match(new RegExp(routeRegex));\n    return match?.[0] === routeLink;\n  }\n  /**\n   * if the path segment has route params, read the param value from url\n   * for each segment of route this gets called\n   *\n   * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n   */\n  resolvePathSegment(segment, activatedRouteSnapshot) {\n    //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n    if (segment.includes(PATH_PARAM.PREFIX)) {\n      Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n        segment = segment.replace(`:${key}`, `${value}`);\n      });\n    }\n    return segment;\n  }\n  /**\n   * queryParams & fragments for previous breadcrumb path are copied over to new list\n   */\n  getQueryParamsFromPreviousList(routeLink) {\n    const {\n      queryParams,\n      fragment\n    } = this.previousBreadcrumbs.find(item => item.routeLink === routeLink) || {};\n    return {\n      queryParams,\n      fragment\n    };\n  }\n  /**\n   * set current activated route query params to the last breadcrumb item\n   */\n  setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n    if (lastItem) {\n      const {\n        queryParams,\n        fragment\n      } = activatedRouteSnapshot;\n      lastItem.queryParams = queryParams ? {\n        ...queryParams\n      } : undefined;\n      lastItem.fragment = fragment;\n    }\n  }\n  /**\n   * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n   * When both are defined, child takes precedence\n   *\n   * Ex: Below we are setting breadcrumb on both parent and child.\n   * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n   * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n   *                                                AND\n   * children: [\n   *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n   * ]\n   */\n  parseRouteData(routeConfig) {\n    const {\n      path,\n      data\n    } = routeConfig;\n    const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n    return {\n      path,\n      breadcrumb\n    };\n  }\n  /**\n   * get empty children of a module or Component. Empty child is the one with path: ''\n   * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n   */\n  mergeWithBaseChildData(routeConfig, config) {\n    if (!routeConfig) {\n      return this.extractObject(config);\n    }\n    let baseChild;\n    if (routeConfig.loadChildren) {\n      // To handle a module with empty child route\n      baseChild = routeConfig._loadedRoutes.find(route => route.path === '');\n    } else if (routeConfig.children) {\n      // To handle a component with empty child route\n      baseChild = routeConfig.children.find(route => route.path === '');\n    }\n    const childConfig = baseChild?.data?.breadcrumb;\n    return childConfig ? this.mergeWithBaseChildData(baseChild, {\n      ...this.extractObject(config),\n      ...this.extractObject(childConfig)\n    }) : this.extractObject(config);\n  }\n  /**\n   * Update breadcrumb dynamically\n   *\n   * key can be a path | alias\n   *\n   * 1) Using complete route path. route can be passed the same way you define angular routes\n   * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n   * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n   * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n   * ------------------------------------------ OR ------------------------------------------\n   * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n   * - update label Ex: set('@mentor', 'Enabler')\n   * - change visibility Ex: set('@mentorEdit', { skip: true })\n   *\n   *\n   * value can be string | BreadcrumbObject | BreadcrumbFunction\n   */\n  set(key, breadcrumb) {\n    const breadcrumbObject = this.extractObject(breadcrumb);\n    let updateArgs;\n    if (key.startsWith(ALIAS_PREFIX)) {\n      updateArgs = ['alias', {\n        ...breadcrumbObject,\n        alias: key.slice(1)\n      }];\n    } else if (key.includes(PATH_PARAM.PREFIX)) {\n      updateArgs = ['routeRegex', {\n        ...breadcrumbObject,\n        routeRegex: this.buildRegex(key)\n      }];\n    } else {\n      updateArgs = ['routeLink', {\n        ...breadcrumbObject,\n        routeLink: this.ensureLeadingSlash(key)\n      }];\n    }\n    // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n    // change it to false since this is user supplied value\n    updateArgs[1].isAutoGeneratedLabel = false;\n    this.updateStore(...updateArgs);\n    this.updateCurrentBreadcrumbs(...updateArgs);\n  }\n  /**\n   * Update the store to reuse for dynamic declarations\n   * If the store already has this route definition update it, else add\n   */\n  updateStore(key, breadcrumb) {\n    const storeItemIndex = this.dynamicBreadcrumbStore.findIndex(item => {\n      return breadcrumb[key] === item[key];\n    });\n    if (storeItemIndex > -1) {\n      this.dynamicBreadcrumbStore[storeItemIndex] = {\n        ...this.dynamicBreadcrumbStore[storeItemIndex],\n        ...breadcrumb\n      };\n    } else {\n      this.dynamicBreadcrumbStore.push({\n        ...breadcrumb\n      });\n    }\n  }\n  /**\n   * If breadcrumb is present in current breadcrumbs update it and emit new stream\n   */\n  updateCurrentBreadcrumbs(key, breadcrumb) {\n    const itemIndex = this.currentBreadcrumbs.findIndex(item => {\n      return key === 'routeRegex' ? this.matchRegex(item.routeLink, breadcrumb[key]) : breadcrumb[key] === item[key];\n    });\n    if (itemIndex > -1) {\n      this.currentBreadcrumbs[itemIndex] = {\n        ...this.currentBreadcrumbs[itemIndex],\n        ...breadcrumb\n      };\n      const breadcrumbsToShow = this.currentBreadcrumbs.filter(item => !item.skip);\n      this.breadcrumbs.next([...breadcrumbsToShow]);\n    }\n  }\n  /**\n   * For a route with path param, we create regex dynamically from angular route syntax\n   * '/mentor/:id' becomes '/mentor/[^/]',\n   * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n   */\n  buildRegex(path) {\n    return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n  }\n  ensureLeadingSlash(path) {\n    return path.startsWith('/') ? path : `/${path}`;\n  }\n  /**\n   * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n   *\n   * string: simple static breadcrumb label for a path\n   * function: callback that gets invoked with resolved path param\n   * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n   */\n  extractLabel(config, resolvedParam) {\n    const label = typeof config === 'object' ? config.label : config;\n    if (typeof label === 'function') {\n      return label(resolvedParam);\n    }\n    return label;\n  }\n  extractObject(config) {\n    // don't include {label} if config is undefined. This is important since we merge the configs\n    if (config && (typeof config === 'string' || typeof config === 'function')) {\n      return {\n        label: config\n      };\n    }\n    return config || {};\n  }\n}\nBreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) {\n  return new (t || BreadcrumbService)(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router));\n};\nBreadcrumbService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreadcrumbService,\n  factory: BreadcrumbService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ActivatedRoute\n    }, {\n      type: i1.Router\n    }];\n  }, null);\n})();\nclass BreadcrumbComponent {\n  constructor(breadcrumbService, activateRoute) {\n    this.breadcrumbService = breadcrumbService;\n    this._separator = '/';\n    /**\n     * If true, breadcrumb is auto generated even without any mapping label\n     * Default label is same as route segment\n     */\n    this.autoGenerate = true;\n    /**\n     * By default query params will be preserved with breadcrumbs\n     */\n    this.preserveQueryParams = true;\n    /**\n     * By default query fragments will be preserved with breadcrumbs\n     */\n    this.preserveFragment = true;\n    /**\n     * custom class provided by consumer to increase specificity\n     * This will benefit to override styles that are conflicting\n     */\n    this.class = '';\n    this.setupMessage = 'not set up yet';\n    this.someParameterValue = null;\n    // breadcrumb inside ngIf works only this way\n    activateRoute.params.subscribe(params => {\n      this.setupComponent(params['someParam']);\n    });\n  }\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n  set separator(value) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n  get separator() {\n    return this._separator;\n  }\n  setupComponent(someParam) {\n    this.setupMessage = 'set up at ' + new Date();\n    this.someParameterValue = someParam;\n  }\n  ngOnInit() {\n    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map(breadcrumbs => {\n      return breadcrumbs.filter(breadcrumb => {\n        // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n        // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n        if (this.autoGenerate) {\n          return true;\n        }\n        return !breadcrumb.isAutoGeneratedLabel;\n      }).map(breadcrumb => {\n        // Do not mutate breadcrumb as its source of truth.\n        // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n        const {\n          routeInterceptor,\n          routeLink\n        } = breadcrumb;\n        return {\n          ...breadcrumb,\n          routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink\n        };\n      });\n    }));\n  }\n}\nBreadcrumbComponent.ɵfac = function BreadcrumbComponent_Factory(t) {\n  return new (t || BreadcrumbComponent)(i0.ɵɵdirectiveInject(BreadcrumbService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nBreadcrumbComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BreadcrumbComponent,\n  selectors: [[\"xng-breadcrumb\"]],\n  contentQueries: function BreadcrumbComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, BreadcrumbItemDirective, 5, TemplateRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);\n    }\n  },\n  inputs: {\n    autoGenerate: \"autoGenerate\",\n    preserveQueryParams: \"preserveQueryParams\",\n    preserveFragment: \"preserveFragment\",\n    class: \"class\",\n    anchorTarget: \"anchorTarget\",\n    separator: \"separator\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[\"aria-label\", \"breadcrumb\", 1, \"xng-breadcrumb-root\", 3, \"ngClass\"], [1, \"xng-breadcrumb-list\"], [4, \"ngFor\", \"ngForOf\"], [1, \"xng-breadcrumb-item\"], [\"class\", \"xng-breadcrumb-link\", \"role\", \"button\", \"rel\", \"noopener noreferrer\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-trail\", 4, \"ngIf\"], [\"class\", \"xng-breadcrumb-separator\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"role\", \"button\", \"rel\", \"noopener noreferrer\", 1, \"xng-breadcrumb-link\", 3, \"ngClass\", \"routerLink\", \"queryParams\", \"fragment\", \"target\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [4, \"ngIf\"], [1, \"xng-breadcrumb-trail\"], [\"aria-hidden\", \"true\", 1, \"xng-breadcrumb-separator\"], [4, \"ngTemplateOutlet\"]],\n  template: function BreadcrumbComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"ol\", 1);\n      i0.ɵɵtemplate(2, BreadcrumbComponent_ng_container_2_Template, 5, 3, \"ng-container\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", ctx.class);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 2, ctx.breadcrumbs$));\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.NgTemplateOutlet, i1.RouterLink, i3.AsyncPipe],\n  styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbComponent, [{\n    type: Component,\n    args: [{\n      selector: 'xng-breadcrumb',\n      encapsulation: ViewEncapsulation.None,\n      template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\",\n      styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: BreadcrumbService\n    }, {\n      type: i1.ActivatedRoute\n    }];\n  }, {\n    itemTemplate: [{\n      type: ContentChild,\n      args: [BreadcrumbItemDirective, {\n        static: false,\n        read: TemplateRef\n      }]\n    }],\n    autoGenerate: [{\n      type: Input\n    }],\n    preserveQueryParams: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input\n    }],\n    class: [{\n      type: Input\n    }],\n    anchorTarget: [{\n      type: Input\n    }],\n    separator: [{\n      type: Input,\n      args: ['separator']\n    }]\n  });\n})();\nclass BreadcrumbModule {}\nBreadcrumbModule.ɵfac = function BreadcrumbModule_Factory(t) {\n  return new (t || BreadcrumbModule)();\n};\nBreadcrumbModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BreadcrumbModule\n});\nBreadcrumbModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, RouterModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreadcrumbModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n      imports: [CommonModule, RouterModule],\n      exports: [BreadcrumbComponent, BreadcrumbItemDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };","map":{"version":3,"names":["i0","Directive","Injectable","TemplateRef","Component","ViewEncapsulation","ContentChild","Input","NgModule","i1","GuardsCheckEnd","RouterModule","filter","map","BehaviorSubject","i3","CommonModule","BreadcrumbItemDirective","ɵfac","ɵdir","type","args","selector","PATH_PARAM","PREFIX","REGEX_IDENTIFIER","REGEX_REPLACER","ALIAS_PREFIX","isNonEmpty","obj","Object","keys","length","BreadcrumbService","constructor","activatedRoute","router","baseHref","dynamicBreadcrumbStore","currentBreadcrumbs","previousBreadcrumbs","breadcrumbs","breadcrumbs$","asObservable","detectRouteChanges","setupBreadcrumbs","snapshot","events","pipe","event","subscribe","shouldActivate","state","root","activatedRouteSnapshot","rootBreadcrumb","getRootBreadcrumb","prepareBreadcrumbList","rootConfig","config","find","path","extractObject","data","breadcrumb","storeItem","getFromStore","alias","routeLink","getQueryParamsFromPreviousList","prepareBreadcrumbItem","routeLinkPrefix","parseRouteData","routeConfig","resolvedSegment","resolvePathSegment","label","extractLabel","isAutoGeneratedLabel","autoGeneratedLabel","breadcrumbItem","push","firstChild","lastCrumb","setQueryParamsForActiveBreadcrumb","breadcrumbsToShow","item","skip","next","matchRegex","routeRegex","match","RegExp","segment","includes","entries","params","forEach","key","value","replace","queryParams","fragment","lastItem","undefined","mergeWithBaseChildData","baseChild","loadChildren","_loadedRoutes","route","children","childConfig","set","breadcrumbObject","updateArgs","startsWith","slice","buildRegex","ensureLeadingSlash","updateStore","updateCurrentBreadcrumbs","storeItemIndex","findIndex","itemIndex","resolvedParam","ActivatedRoute","Router","ɵprov","providedIn","BreadcrumbComponent","breadcrumbService","activateRoute","_separator","autoGenerate","preserveQueryParams","preserveFragment","class","setupMessage","someParameterValue","setupComponent","separator","separatorTemplate","someParam","Date","ngOnInit","routeInterceptor","ɵcmp","NgClass","NgForOf","NgIf","NgTemplateOutlet","RouterLink","AsyncPipe","encapsulation","None","template","styles","itemTemplate","static","read","anchorTarget","BreadcrumbModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["/Users/godwinonah/Documents/TheBags/client/node_modules/xng-breadcrumb/fesm2020/xng-breadcrumb.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Injectable, TemplateRef, Component, ViewEncapsulation, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { GuardsCheckEnd, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This directive is used to customize the breadcrumb label behavior\n * *xngBreadcrumbItem directive can be used in the child element of xng-breadcrumb\n * Usage: refer to the demo - app.component.html\n */\nclass BreadcrumbItemDirective {\n}\nBreadcrumbItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBreadcrumbItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbItemDirective, selector: \"[xngBreadcrumbItem]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbItemDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[xngBreadcrumbItem]',\n                }]\n        }] });\n\nconst PATH_PARAM = {\n    PREFIX: ':',\n    REGEX_IDENTIFIER: '/:[^/]+',\n    REGEX_REPLACER: '/[^/]+',\n};\nconst ALIAS_PREFIX = '@';\nconst isNonEmpty = (obj) => {\n    return obj && Object.keys(obj).length > 0;\n};\nclass BreadcrumbService {\n    constructor(activatedRoute, router) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.baseHref = '/';\n        /**\n         * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n         * Breadcrumbs can be set from anywhere (component, service) in the app.\n         * On every breadcrumb update check this store and use the info if available.\n         */\n        this.dynamicBreadcrumbStore = [];\n        /**\n         * breadcrumbList for the current route\n         * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n         * If effected, update the change and emit a new stream\n         */\n        this.currentBreadcrumbs = [];\n        this.previousBreadcrumbs = [];\n        /**\n         * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n         * Emits on every route change OR dynamic update of breadcrumb\n         */\n        this.breadcrumbs = new BehaviorSubject([]);\n        this.breadcrumbs$ = this.breadcrumbs.asObservable();\n        this.detectRouteChanges();\n    }\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    detectRouteChanges() {\n        // Special case where breadcrumb service & component instantiates after a route is navigated.\n        // Ex: put breadcrumbs within *ngIf and this.router.events would be empty\n        // This check is also required where  { initialNavigation: 'enabledBlocking' } is applied to routes\n        this.setupBreadcrumbs(this.activatedRoute.snapshot);\n        this.router.events\n            .pipe(filter((event) => event instanceof GuardsCheckEnd))\n            .subscribe((event) => {\n            // activatedRoute doesn't carry data when shouldReuseRoute returns false\n            // use the event data with GuardsCheckEnd as workaround\n            // Check for shouldActivate in case where the authGuard returns false the breadcrumbs shouldn't be changed\n            if (event.shouldActivate) {\n                this.setupBreadcrumbs(event.state.root);\n            }\n        });\n    }\n    setupBreadcrumbs(activatedRouteSnapshot) {\n        this.previousBreadcrumbs = this.currentBreadcrumbs;\n        // breadcrumb label for base OR root path. Usually, this can be set as 'Home'\n        const rootBreadcrumb = this.getRootBreadcrumb();\n        this.currentBreadcrumbs = rootBreadcrumb ? [rootBreadcrumb] : [];\n        this.prepareBreadcrumbList(activatedRouteSnapshot, this.baseHref);\n    }\n    getRootBreadcrumb() {\n        const rootConfig = this.router.config.find((config) => config.path === '');\n        const rootBreadcrumb = this.extractObject(rootConfig?.data?.breadcrumb);\n        const storeItem = this.getFromStore(rootBreadcrumb.alias, '/');\n        if (isNonEmpty(rootBreadcrumb) || isNonEmpty(storeItem)) {\n            return {\n                ...storeItem,\n                ...rootBreadcrumb,\n                routeLink: this.baseHref,\n                ...this.getQueryParamsFromPreviousList('/'),\n            };\n        }\n    }\n    prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix) {\n        const { path, breadcrumb } = this.parseRouteData(activatedRouteSnapshot.routeConfig);\n        const resolvedSegment = this.resolvePathSegment(path, activatedRouteSnapshot);\n        const routeLink = `${routeLinkPrefix}${resolvedSegment}`;\n        const storeItem = this.getFromStore(breadcrumb.alias, routeLink);\n        const label = this.extractLabel(storeItem?.label || breadcrumb?.label, resolvedSegment);\n        let isAutoGeneratedLabel = false;\n        let autoGeneratedLabel = '';\n        if (!label) {\n            isAutoGeneratedLabel = true;\n            autoGeneratedLabel = resolvedSegment;\n        }\n        return {\n            ...storeItem,\n            ...breadcrumb,\n            label: isAutoGeneratedLabel ? autoGeneratedLabel : label,\n            routeLink,\n            isAutoGeneratedLabel,\n            ...this.getQueryParamsFromPreviousList(routeLink),\n        };\n    }\n    prepareBreadcrumbList(activatedRouteSnapshot, routeLinkPrefix) {\n        if (activatedRouteSnapshot.routeConfig?.path) {\n            const breadcrumbItem = this.prepareBreadcrumbItem(activatedRouteSnapshot, routeLinkPrefix);\n            this.currentBreadcrumbs.push(breadcrumbItem);\n            if (activatedRouteSnapshot.firstChild) {\n                return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, breadcrumbItem.routeLink + '/');\n            }\n        }\n        else if (activatedRouteSnapshot.firstChild) {\n            return this.prepareBreadcrumbList(activatedRouteSnapshot.firstChild, routeLinkPrefix);\n        }\n        const lastCrumb = this.currentBreadcrumbs[this.currentBreadcrumbs.length - 1];\n        this.setQueryParamsForActiveBreadcrumb(lastCrumb, activatedRouteSnapshot);\n        // remove breadcrumb items that needs to be hidden\n        const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n        this.breadcrumbs.next(breadcrumbsToShow);\n    }\n    getFromStore(alias, routeLink) {\n        return this.dynamicBreadcrumbStore.find((item) => {\n            return ((alias && alias === item.alias) ||\n                (routeLink && routeLink === item.routeLink) ||\n                this.matchRegex(routeLink, item.routeRegex));\n        });\n    }\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    matchRegex(routeLink, routeRegex) {\n        const match = routeLink.match(new RegExp(routeRegex));\n        return match?.[0] === routeLink;\n    }\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    resolvePathSegment(segment, activatedRouteSnapshot) {\n        //quirk -segment can be defined as view/:id in route config in which case you need to make it view/<resolved-param>\n        if (segment.includes(PATH_PARAM.PREFIX)) {\n            Object.entries(activatedRouteSnapshot.params).forEach(([key, value]) => {\n                segment = segment.replace(`:${key}`, `${value}`);\n            });\n        }\n        return segment;\n    }\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    getQueryParamsFromPreviousList(routeLink) {\n        const { queryParams, fragment } = this.previousBreadcrumbs.find((item) => item.routeLink === routeLink) ||\n            {};\n        return { queryParams, fragment };\n    }\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    setQueryParamsForActiveBreadcrumb(lastItem, activatedRouteSnapshot) {\n        if (lastItem) {\n            const { queryParams, fragment } = activatedRouteSnapshot;\n            lastItem.queryParams = queryParams ? { ...queryParams } : undefined;\n            lastItem.fragment = fragment;\n        }\n    }\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule) , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    parseRouteData(routeConfig) {\n        const { path, data } = routeConfig;\n        const breadcrumb = this.mergeWithBaseChildData(routeConfig, data?.breadcrumb);\n        return { path, breadcrumb };\n    }\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    mergeWithBaseChildData(routeConfig, config) {\n        if (!routeConfig) {\n            return this.extractObject(config);\n        }\n        let baseChild;\n        if (routeConfig.loadChildren) {\n            // To handle a module with empty child route\n            baseChild = routeConfig._loadedRoutes.find((route) => route.path === '');\n        }\n        else if (routeConfig.children) {\n            // To handle a component with empty child route\n            baseChild = routeConfig.children.find((route) => route.path === '');\n        }\n        const childConfig = baseChild?.data?.breadcrumb;\n        return childConfig\n            ? this.mergeWithBaseChildData(baseChild, {\n                ...this.extractObject(config),\n                ...this.extractObject(childConfig),\n            })\n            : this.extractObject(config);\n    }\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key, breadcrumb) {\n        const breadcrumbObject = this.extractObject(breadcrumb);\n        let updateArgs;\n        if (key.startsWith(ALIAS_PREFIX)) {\n            updateArgs = ['alias', { ...breadcrumbObject, alias: key.slice(1) }];\n        }\n        else if (key.includes(PATH_PARAM.PREFIX)) {\n            updateArgs = [\n                'routeRegex',\n                { ...breadcrumbObject, routeRegex: this.buildRegex(key) },\n            ];\n        }\n        else {\n            updateArgs = [\n                'routeLink',\n                { ...breadcrumbObject, routeLink: this.ensureLeadingSlash(key) },\n            ];\n        }\n        // For this route if previously a breadcrumb is not defined that sets isAutoGeneratedLabel: true\n        // change it to false since this is user supplied value\n        updateArgs[1].isAutoGeneratedLabel = false;\n        this.updateStore(...updateArgs);\n        this.updateCurrentBreadcrumbs(...updateArgs);\n    }\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    updateStore(key, breadcrumb) {\n        const storeItemIndex = this.dynamicBreadcrumbStore.findIndex((item) => {\n            return breadcrumb[key] === item[key];\n        });\n        if (storeItemIndex > -1) {\n            this.dynamicBreadcrumbStore[storeItemIndex] = {\n                ...this.dynamicBreadcrumbStore[storeItemIndex],\n                ...breadcrumb,\n            };\n        }\n        else {\n            this.dynamicBreadcrumbStore.push({ ...breadcrumb });\n        }\n    }\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    updateCurrentBreadcrumbs(key, breadcrumb) {\n        const itemIndex = this.currentBreadcrumbs.findIndex((item) => {\n            return key === 'routeRegex'\n                ? this.matchRegex(item.routeLink, breadcrumb[key])\n                : breadcrumb[key] === item[key];\n        });\n        if (itemIndex > -1) {\n            this.currentBreadcrumbs[itemIndex] = {\n                ...this.currentBreadcrumbs[itemIndex],\n                ...breadcrumb,\n            };\n            const breadcrumbsToShow = this.currentBreadcrumbs.filter((item) => !item.skip);\n            this.breadcrumbs.next([...breadcrumbsToShow]);\n        }\n    }\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    buildRegex(path) {\n        return this.ensureLeadingSlash(path).replace(new RegExp(PATH_PARAM.REGEX_IDENTIFIER, 'g'), PATH_PARAM.REGEX_REPLACER);\n    }\n    ensureLeadingSlash(path) {\n        return path.startsWith('/') ? path : `/${path}`;\n    }\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    extractLabel(config, resolvedParam) {\n        const label = typeof config === 'object' ? config.label : config;\n        if (typeof label === 'function') {\n            return label(resolvedParam);\n        }\n        return label;\n    }\n    extractObject(config) {\n        // don't include {label} if config is undefined. This is important since we merge the configs\n        if (config &&\n            (typeof config === 'string' || typeof config === 'function')) {\n            return { label: config };\n        }\n        return config || {};\n    }\n}\nBreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }], target: i0.ɵɵFactoryTarget.Injectable });\nBreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }]; } });\n\nclass BreadcrumbComponent {\n    constructor(breadcrumbService, activateRoute) {\n        this.breadcrumbService = breadcrumbService;\n        this._separator = '/';\n        /**\n         * If true, breadcrumb is auto generated even without any mapping label\n         * Default label is same as route segment\n         */\n        this.autoGenerate = true;\n        /**\n         * By default query params will be preserved with breadcrumbs\n         */\n        this.preserveQueryParams = true;\n        /**\n         * By default query fragments will be preserved with breadcrumbs\n         */\n        this.preserveFragment = true;\n        /**\n         * custom class provided by consumer to increase specificity\n         * This will benefit to override styles that are conflicting\n         */\n        this.class = '';\n        this.setupMessage = 'not set up yet';\n        this.someParameterValue = null;\n        // breadcrumb inside ngIf works only this way\n        activateRoute.params.subscribe((params) => {\n            this.setupComponent(params['someParam']);\n        });\n    }\n    /**\n     * separator between breadcrumbs, defaults to '/'.\n     * User can customize separator either by passing a String or Template\n     *\n     * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n     *\n     * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n     */\n    set separator(value) {\n        if (value instanceof TemplateRef) {\n            this.separatorTemplate = value;\n            this._separator = undefined;\n        }\n        else {\n            this.separatorTemplate = undefined;\n            this._separator = value || '/';\n        }\n    }\n    get separator() {\n        return this._separator;\n    }\n    setupComponent(someParam) {\n        this.setupMessage = 'set up at ' + new Date();\n        this.someParameterValue = someParam;\n    }\n    ngOnInit() {\n        this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(map((breadcrumbs) => {\n            return breadcrumbs\n                .filter((breadcrumb) => {\n                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n                // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n                if (this.autoGenerate) {\n                    return true;\n                }\n                return !breadcrumb.isAutoGeneratedLabel;\n            })\n                .map((breadcrumb) => {\n                // Do not mutate breadcrumb as its source of truth.\n                // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n                const { routeInterceptor, routeLink } = breadcrumb;\n                return {\n                    ...breadcrumb,\n                    routeLink: routeInterceptor?.(routeLink, breadcrumb) || routeLink,\n                };\n            });\n        }));\n    }\n}\nBreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: BreadcrumbService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });\nBreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: BreadcrumbComponent, selector: \"xng-breadcrumb\", inputs: { autoGenerate: \"autoGenerate\", preserveQueryParams: \"preserveQueryParams\", preserveFragment: \"preserveFragment\", class: \"class\", anchorTarget: \"anchorTarget\", separator: \"separator\" }, queries: [{ propertyName: \"itemTemplate\", first: true, predicate: BreadcrumbItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"], dependencies: [{ kind: \"directive\", type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i3.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'xng-breadcrumb', encapsulation: ViewEncapsulation.None, template: \"<nav aria-label=\\\"breadcrumb\\\" class=\\\"xng-breadcrumb-root\\\" [ngClass]=\\\"class\\\">\\n  <ol class=\\\"xng-breadcrumb-list\\\">\\n    <ng-container\\n      *ngFor=\\\"\\n        let breadcrumb of breadcrumbs$ | async;\\n        last as isLast;\\n        first as isFirst;\\n        index as index;\\n        count as count\\n      \\\"\\n    >\\n      <li class=\\\"xng-breadcrumb-item\\\">\\n        <a\\n          *ngIf=\\\"!isLast\\\"\\n          class=\\\"xng-breadcrumb-link\\\"\\n          [ngClass]=\\\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\\\"\\n          [attr.aria-disabled]=\\\"breadcrumb.disable\\\"\\n          [attr.tabIndex]=\\\"breadcrumb.disable ? -1 : 0\\\"\\n          role=\\\"button\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n          [routerLink]=\\\"\\n            breadcrumb.routeInterceptor\\n              ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\\n              : breadcrumb.routeLink\\n          \\\"\\n          [queryParams]=\\\"\\n            preserveQueryParams ? breadcrumb.queryParams : undefined\\n          \\\"\\n          [fragment]=\\\"preserveFragment ? breadcrumb.fragment : undefined\\\"\\n          [target]=\\\"anchorTarget ? anchorTarget : '_self'\\\"\\n        >\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </a>\\n\\n        <label *ngIf=\\\"isLast\\\" class=\\\"xng-breadcrumb-trail\\\">\\n          <ng-container\\n            *ngTemplateOutlet=\\\"\\n              itemTemplate;\\n              context: {\\n                $implicit: breadcrumb.label,\\n                info: breadcrumb.info,\\n                last: isLast,\\n                first: isFirst,\\n                index: index,\\n                count: count\\n              }\\n            \\\"\\n          ></ng-container>\\n          <ng-container *ngIf=\\\"!itemTemplate\\\">{{\\n            breadcrumb.label\\n          }}</ng-container>\\n        </label>\\n      </li>\\n\\n      <li *ngIf=\\\"!isLast\\\" class=\\\"xng-breadcrumb-separator\\\" aria-hidden=\\\"true\\\">\\n        <ng-container *ngTemplateOutlet=\\\"separatorTemplate\\\"></ng-container>\\n        <ng-container *ngIf=\\\"!separatorTemplate\\\">{{ separator }}</ng-container>\\n      </li>\\n    </ng-container>\\n  </ol>\\n</nav>\\n\", styles: [\".xng-breadcrumb-root{margin:0;color:#0009}.xng-breadcrumb-list{display:flex;align-items:center;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{display:flex;align-items:center;color:#000000e6}.xng-breadcrumb-link{display:flex;align-items:center;white-space:nowrap;color:inherit;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;cursor:pointer}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{pointer-events:none;cursor:disabled}.xng-breadcrumb-separator{display:flex;-webkit-user-select:none;user-select:none;margin-left:8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: i1.ActivatedRoute }]; }, propDecorators: { itemTemplate: [{\n                type: ContentChild,\n                args: [BreadcrumbItemDirective, { static: false, read: TemplateRef }]\n            }], autoGenerate: [{\n                type: Input\n            }], preserveQueryParams: [{\n                type: Input\n            }], preserveFragment: [{\n                type: Input\n            }], class: [{\n                type: Input\n            }], anchorTarget: [{\n                type: Input\n            }], separator: [{\n                type: Input,\n                args: ['separator']\n            }] } });\n\nclass BreadcrumbModule {\n}\nBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent, BreadcrumbItemDirective], imports: [CommonModule, RouterModule], exports: [BreadcrumbComponent, BreadcrumbItemDirective] });\nBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule, RouterModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: BreadcrumbModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [BreadcrumbComponent, BreadcrumbItemDirective],\n                    imports: [CommonModule, RouterModule],\n                    exports: [BreadcrumbComponent, BreadcrumbItemDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of xng-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreadcrumbComponent, BreadcrumbItemDirective, BreadcrumbModule, BreadcrumbService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}