{"ast":null,"code":"import { environment } from 'environments/environment';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { Basket } from '../prodsharemod/models/IBasket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BasketService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.basketSource = new BehaviorSubject(null);\n    this.totalBasketPriceSource = new BehaviorSubject(null);\n    this.basket$ = this.basketSource.asObservable();\n    this.totalBasketPriceSource$ = this.totalBasketPriceSource.asObservable();\n    this.delivery = [];\n  }\n  GetBasket(id) {\n    return this.http.get(this.baseUrl + 'basket?id=' + id).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.TotalBasketValue();\n      }\n    });\n  }\n  SetBasket(basket) {\n    console.log(basket.deliveryName);\n    return this.http.post(this.baseUrl + 'basket', basket).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.TotalBasketValue();\n      }\n    });\n  }\n  CurrentBasket() {\n    return this.basketSource.value;\n  }\n  TotalBasketValue() {\n    const basket = this.CurrentBasket();\n    if (!basket) return;\n    const subTotal = basket.items.reduce((sum, item) => item.prodPrice * item.quantity + sum, 0);\n    const total = subTotal + Number(basket.deliveryPrice);\n    this.totalBasketPriceSource.next({\n      shippingPrice: basket.deliveryPrice,\n      subTotal,\n      total\n    });\n  }\n  AddItemsToBasket(item, quantity = 1) {\n    if (this.isProduct(item)) item = this.MapBasketToBasketItem(item);\n    const basket = this.CurrentBasket() ?? this.CreateBasket();\n    basket.items = this.AddOrUpdate(basket.items, item, quantity);\n    this.SetBasket(basket);\n  }\n  RemoveItemsFromBasket(id, quantity) {\n    const basket = this.CurrentBasket();\n    if (!basket) return;\n    const item = basket.items.find(index => index.id === id); //finding item \n    if (item.quantity < 0) return;\n    if (item) {\n      item.quantity -= quantity;\n      if (item.quantity === 0) basket.items = basket.items.filter(index => index.id != id);\n      if (basket.items.length > 0) this.SetBasket(basket);else {\n        this.DeleteBasket(basket);\n      }\n    }\n  }\n  DeleteBasket(basket) {\n    return this.http.delete(this.baseUrl + 'basket?id=' + basket.id).subscribe({\n      next: () => {\n        this.RemoveAllItemsInBasket();\n      }\n    });\n  }\n  RemoveAllItemsInBasket() {\n    this.basketSource.next(null);\n    this.totalBasketPriceSource.next(null);\n    localStorage.removeItem('basket_id');\n  }\n  AddOrUpdate(items, itemToAdd, quantity) {\n    const item = items.find(index => index.id === itemToAdd.id); //finding item index\n    if (item) item.quantity += quantity;else {\n      itemToAdd.quantity = quantity;\n      items.push(itemToAdd);\n    }\n    return items;\n  }\n  CreateBasket() {\n    const basket = new Basket();\n    basket.deliveryPrice = 1;\n    localStorage.setItem('basket_id', basket.id); //computer local storage set this id for load after refereshing or return back  \n    return basket;\n  }\n  MapBasketToBasketItem(item) {\n    return {\n      id: item.id,\n      prodName: item.prodName,\n      prodPrice: item.prodPrice,\n      quantity: 0,\n      prodPicture: item.prodPicture,\n      productBrand: item.productBrand,\n      productType: item.productType\n    };\n  }\n  isProduct(item) {\n    return item.productBrand != undefined;\n  }\n  SetDelivery(delivery) {\n    const basket = this.CurrentBasket();\n    if (basket) {\n      basket.deliveryPrice = delivery.delPrice;\n      basket.deliveryId = delivery.id;\n      basket.deliveryName = delivery.delName;\n      basket.deliveryTime = delivery.delTime;\n      basket.deliveryDescription = delivery.delDescription;\n      this.SetBasket(basket);\n    }\n  }\n  CreatePaymentIntent() {\n    return this.http.post(this.baseUrl + 'payment/' + this.CurrentBasket()?.id, {}).pipe(map(basket => {\n      this.basketSource.next(basket);\n    }));\n  }\n}\nBasketService.ɵfac = function BasketService_Factory(t) {\n  return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient));\n};\nBasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketService,\n  factory: BasketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["environment","BehaviorSubject","map","Basket","BasketService","constructor","http","apiUrl","basketSource","asObservable","totalBasketPriceSource","GetBasket","id","get","baseUrl","subscribe","next","basket","TotalBasketValue","SetBasket","console","log","deliveryName","post","CurrentBasket","value","subTotal","items","reduce","sum","item","prodPrice","quantity","total","Number","deliveryPrice","shippingPrice","AddItemsToBasket","isProduct","MapBasketToBasketItem","CreateBasket","AddOrUpdate","RemoveItemsFromBasket","find","index","filter","length","DeleteBasket","delete","RemoveAllItemsInBasket","localStorage","removeItem","itemToAdd","push","setItem","prodName","prodPicture","productBrand","productType","undefined","SetDelivery","delivery","delPrice","deliveryId","delName","deliveryTime","delTime","deliveryDescription","delDescription","CreatePaymentIntent","pipe","factory","providedIn"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/TheBags/client/src/app/basket/basket.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport { environment } from 'environments/environment';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { Basket, IBasket, IBasketItem, TotalBasketPrice } from '../prodsharemod/models/IBasket';\nimport { IDelivery } from '../prodsharemod/models/IDelivery';\nimport { IProduct } from '../prodsharemod/models/IProduct';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class BasketService{\n  baseUrl = environment.apiUrl;\n  private basketSource = new BehaviorSubject<IBasket|null>(null);\n  private totalBasketPriceSource = new BehaviorSubject<TotalBasketPrice|null>(null);\n  basket$  = this.basketSource.asObservable();\n  totalBasketPriceSource$  = this.totalBasketPriceSource.asObservable();\n  delivery:IDelivery[] =[];\n \n\n  constructor(private http : HttpClient) {\n   }\n  \n  GetBasket(id:string){\n    return this.http.get<IBasket>(this.baseUrl+'basket?id='+id).subscribe({\n    next: basket =>{\n      this.basketSource.next(basket);\n      this.TotalBasketValue();     \n    }  \n  });\n  }\n\nSetBasket(basket:IBasket){\n  console.log(basket.deliveryName)\n    return this.http.post<IBasket>(this.baseUrl+'basket',basket).subscribe({\n      next: basket =>{\n        this.basketSource.next(basket);\n        this.TotalBasketValue();    \n      }\n    }\n    );    \n}\n\nCurrentBasket(){\n  return this.basketSource.value;\n}\n\nprivate TotalBasketValue(){\n  const basket = this.CurrentBasket();\n  if(!basket)return;\n  const subTotal = basket.items.reduce((sum,item) => item.prodPrice*item.quantity+sum,0);\n  const total = subTotal+Number(basket.deliveryPrice);\n  this.totalBasketPriceSource.next({shippingPrice:basket.deliveryPrice,subTotal,total})\n}\n\nAddItemsToBasket(item:IProduct|IBasketItem,quantity = 1){\n  if(this.isProduct(item)) item = this.MapBasketToBasketItem(item);\n  const basket = this.CurrentBasket()??this.CreateBasket();\n  basket.items = this.AddOrUpdate(basket.items,item,quantity);\n  this.SetBasket(basket);\n}\n\nRemoveItemsFromBasket(id:number,quantity?:number){\n        const basket = this.CurrentBasket();\n        if(!basket) return;\n        const item = basket.items.find(index => index.id === id);//finding item \n        if(item.quantity<0)return;\n        if(item){\n            item.quantity -= quantity;\n            if(item.quantity === 0)\n            basket.items = basket.items.filter(index => index.id != id);\n            if(basket.items.length>0) \n            this.SetBasket(basket);\n            else{this.DeleteBasket(basket)}\n        }\n}\n\nDeleteBasket(basket: IBasket) {\n    return this.http.delete(this.baseUrl+'basket?id='+basket.id).subscribe({\n      next:() =>{\n        this.RemoveAllItemsInBasket();\n  }});\n  }\n\nRemoveAllItemsInBasket(){\n  this.basketSource.next(null);\n  this.totalBasketPriceSource.next(null);\n  localStorage.removeItem('basket_id')  \n}\n\nprivate AddOrUpdate(items: IBasketItem[], itemToAdd: IBasketItem, quantity: number): IBasketItem[] {    \n  const item = items.find(index=>index.id === itemToAdd.id);//finding item index\n    if(item)item.quantity += quantity;\n     else{ itemToAdd.quantity = quantity;\n      items.push(itemToAdd);\n     }\n    return items;\n  }\n\nprivate CreateBasket(): IBasket {\n    const basket = new Basket();\n    basket.deliveryPrice = 1;\n    localStorage.setItem('basket_id',basket.id);//computer local storage set this id for load after refereshing or return back  \n    return basket;\n  }\n\nprivate MapBasketToBasketItem(item: IProduct): IBasketItem {  \n  return {\n    id: item.id,\n    prodName: item.prodName,\n    prodPrice: item.prodPrice,\n    quantity:0,\n    prodPicture: item.prodPicture,\n    productBrand: item.productBrand,\n    productType: item.productType\n  }\n}\n\nprivate isProduct(item:IProduct|IBasketItem):item is IProduct{\nreturn (item as IProduct).productBrand != undefined;\n}\n\nSetDelivery(delivery:IDelivery){\n  const basket = this.CurrentBasket();\n  if(basket){\n     basket.deliveryPrice = delivery.delPrice;\n     basket.deliveryId = delivery.id; \n     basket.deliveryName = delivery.delName ;\n     basket.deliveryTime = delivery.delTime;\n     basket.deliveryDescription = delivery.delDescription;\n     this.SetBasket(basket);\n}\n}\n\nCreatePaymentIntent(){\n  return this.http.post<IBasket>(this.baseUrl+'payment/'+this.CurrentBasket()?.id,{}).pipe(map(\n     basket =>{\n      this.basketSource.next(basket);    \n    } \n  ));}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}