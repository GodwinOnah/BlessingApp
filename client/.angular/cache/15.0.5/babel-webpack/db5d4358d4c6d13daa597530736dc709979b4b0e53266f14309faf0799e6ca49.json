{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../prodshopmod.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../Account/text-inputs/text-inputs.component\";\nfunction ProductTypeComponent_ul_13_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const error_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", error_r2, \" \");\n  }\n}\nfunction ProductTypeComponent_ul_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 12);\n    i0.ɵɵtemplate(1, ProductTypeComponent_ul_13_li_1_Template, 2, 1, \"li\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIfOf\", ctx_r0.errors);\n  }\n}\nexport class ProductTypeComponent {\n  constructor(formbuilder, productsService, toastr, matdialog, prodshopmodService) {\n    this.formbuilder = formbuilder;\n    this.productsService = productsService;\n    this.toastr = toastr;\n    this.matdialog = matdialog;\n    this.prodshopmodService = prodshopmodService;\n    this.errors = null;\n    this.ids = [];\n    this.names = [];\n    this.maxId = 0;\n    this.typeForm = this.formbuilder.group({\n      Name: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.GetProductTypes();\n  }\n  onSubmit() {\n    const find = this.names.find(x => x.toLowerCase() === this.typeForm?.get('Name')?.value.toLowerCase());\n    if (find) {\n      this.toastr.success(\"Type already exist\");\n    } else {\n      this.productsService.UploadType(this.maxId + 1, this.typeForm?.get('Name')?.value).subscribe({\n        next: () => {\n          window.location.reload();\n          this.toastr.success(\"New product type added\");\n        },\n        error: error => {\n          this.toastr.success(\"Not uadded\");\n          this.errors = error.errors;\n        }\n      });\n    }\n  }\n  closeDialog() {\n    this.matdialog.closeAll(); // <- Close the mat dialog\n  }\n\n  GetProductTypes() {\n    this.prodshopmodService.getProductTypes().subscribe({\n      next: types => {\n        for (let x of types) {\n          this.ids.push(x.id);\n          this.names.push(x.name);\n        }\n        this.maxId = this.ids.reduce((a, b) => Math.max(a, b));\n      },\n      error: error => console.log(error)\n    });\n  }\n}\nProductTypeComponent.ɵfac = function ProductTypeComponent_Factory(t) {\n  return new (t || ProductTypeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProdshopmodService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i2.ProdshopmodService));\n};\nProductTypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductTypeComponent,\n  selectors: [[\"app-product-type\"]],\n  decls: 18,\n  vars: 5,\n  consts: [[2, \"background-color\", \"lightgray\", \"padding-bottom\", \"40px\"], [1, \"align-content-left\"], [1, \"btn\", \"btn-danger\", 2, \"margin-top\", \"15px\", \"margin-left\", \"5px\", 3, \"click\"], [1, \"text-center\", 2, \"color\", \"blue\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"col-3\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"text-center\", \"mt-5\"], [3, \"formControl\", \"label\"], [\"class\", \"text-danger list-unstyled\", 4, \"ngIf\"], [1, \"d-grid\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-success\", 2, \"margin-top\", \"10px\", 3, \"disabled\"], [1, \"text-danger\", \"list-unstyled\"], [4, \"ngIf\", \"ngIfOf\"]],\n  template: function ProductTypeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ProductTypeComponent_Template_button_click_2_listener() {\n        return ctx.closeDialog();\n      });\n      i0.ɵɵtext(3, \" x \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h1\");\n      i0.ɵɵtext(6, \"Add Product Type\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5)(9, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function ProductTypeComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(10, \"div\", 7);\n      i0.ɵɵelement(11, \"app-text-inputs\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\");\n      i0.ɵɵtemplate(13, ProductTypeComponent_ul_13_Template, 2, 1, \"ul\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"br\");\n      i0.ɵɵelementStart(15, \"div\", 10)(16, \"button\", 11);\n      i0.ɵɵtext(17, \" Add Type \");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.typeForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formControl\", ctx.typeForm.controls[\"Name\"])(\"label\", \"Type name\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.errors);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.typeForm.invalid);\n    }\n  },\n  dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormControlDirective, i1.FormGroupDirective, i6.TextInputsComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","ProductTypeComponent","constructor","formbuilder","productsService","toastr","matdialog","prodshopmodService","group","Name","required","ngOnInit","GetProductTypes","onSubmit","find","names","x","toLowerCase","typeForm","get","value","success","UploadType","maxId","subscribe","next","window","location","reload","error","errors","closeDialog","closeAll","getProductTypes","types","ids","push","id","name","reduce","a","b","Math","max","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/godwinonah/Documents/BagShop-Client-App/client/src/app/products/product-type/product-type.component.ts","/Users/godwinonah/Documents/BagShop-Client-App/client/src/app/products/product-type/product-type.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ToastrService } from 'ngx-toastr';\nimport { ProdshopmodService } from '../prodshopmod.service';\n\n@Component({\n  selector: 'app-product-type',\n  templateUrl: './product-type.component.html',\n  styleUrls: ['./product-type.component.scss']\n})\nexport class ProductTypeComponent {\n\n  errors : string[] | null = null;\n  ids = [];\n  names: string[] = [];\n  maxId: any=0;\n\n  constructor(private formbuilder:FormBuilder,\n    private productsService : ProdshopmodService,\n    private toastr : ToastrService,\n    private matdialog : MatDialog,\n    private prodshopmodService: ProdshopmodService){\n\n  }\n\n  ngOnInit(): void {\n    \n    this.GetProductTypes();\n    \n  }\n\n  typeForm = this.formbuilder.group({\n    Name: ['',Validators.required]\n  })\n\n  onSubmit(){\n    const find = this.names.find(x=>x.toLowerCase() === \n    this.typeForm?.get('Name')?.value.toLowerCase());\n    if(find)\n    {this.toastr.success(\"Type already exist\");}\n    else{\n    this.productsService.UploadType(this.maxId+1,this.typeForm?.get('Name')?.value).subscribe({\n      next: ()=>{\n        window.location.reload();\n         this.toastr.success(\"New product type added\");\n      },\n      error : error => { \n        this.toastr.success(\"Not uadded\");\n        this.errors = error.errors  }      \n    });\n  }}\n\n  closeDialog(){\n    this.matdialog.closeAll(); // <- Close the mat dialog\n  }\n\n  GetProductTypes(){\n    this.prodshopmodService.getProductTypes().subscribe({\n      next: types=>{ \n          for(let x of types){\n            this.ids.push(x.id); \n            this.names.push(x.name);     \n      }\n      this.maxId = this.ids.reduce((a, b) => Math.max(a, b));\n        },\n        error:error=>console.log(error)   \n  });\n  } \n\n \n}\n","<div style=\"background-color: lightgray; padding-bottom: 40px;\">\n    <div class=\"align-content-left\">\n        <button (click)=\"closeDialog()\"  style=\"margin-top: 15px;margin-left: 5px;\"\n    class=\" btn btn-danger\" >\n        x    \n    </button>\n   \n        </div>\n        <div class=\"text-center\" style=\"color:blue ;\"> <h1>Add Product Type</h1></div>\n       \n    <div class=\"d-flex justify-content-center\">\n    \n        <div class=\"col-3\">\n    \n            <form [formGroup] = \"typeForm\" (ngSubmit)=\"onSubmit()\">\n    \n                <div class=\"text-center mt-5\">\n    \n                  <app-text-inputs [formControl]=\" typeForm.controls['Name']\" \n                   [label]=\"'Type name'\">\n                </app-text-inputs>\n                 </div>\n               \n               \n                <div>\n                <ul class=\"text-danger list-unstyled\" *ngIf=\"errors\">\n                        <li *ngIf=\"let error of errors\">\n                                {{error}}\n                        </li>\n                </ul>\n            </div>\n\n            <br>\n                <div class=\"d-grid\" >\n                    <button [disabled]=\"typeForm.invalid\" class=\"btn btn-lg btn-success\" type=\"submit\" style=\"margin-top:10px ;\">\n                      Add Type\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n    </div>\n    \n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}